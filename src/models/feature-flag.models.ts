/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * An ID used to uniquely identify and reference the feature.
 */
export type FeatureID = string
/**
 * A description of the feature.
 */
export type FeatureDescription = string
/**
 * A display name for the feature to use for display rather than the ID.
 */
export type FeatureDisplayName = string
/**
 * A feature is OFF if enabled is false. If enabled is true, then the feature is ON if there are no conditions (null or empty) or if the conditions are satisfied.
 */
export type EnabledState = boolean
/**
 * Determines whether any or all registered client filters must be evaluated as true for the feature to be considered enabled.
 */
export type RequirementType = 'Any' | 'All'
/**
 * The name used to refer to a client filter.
 */
export type ClientFilterName = string
/**
 * Filters that must run on the client and be evaluated as true for the feature to be considered enabled.
 */
export type ClientFilterCollection = ClientFilter[]
/**
 * The name used to refer to a feature variant.
 */
export type VariantName = string
/**
 * The configuration value for this feature variant.
 */
export type VariantConfigurationValue =
  | string
  | null
  | number
  | {
      [k: string]: unknown
    }
  | unknown[]
  | boolean
/**
 * Overrides the enabled state of the feature if the given variant is assigned. Does not override the state if value is None.
 */
export type VariantStatusOverride = 'None' | 'Enabled' | 'Disabled'
/**
 * The list of variants defined for this feature. A variant represents a configuration value of a feature flag that can be a string, a number, a boolean, or a JSON object.
 */
export type VariantCollection = Variant[]
/**
 * Specifies which variant should be used when the feature is considered disabled.
 */
export type DefaultVariantAllocationWhenDisabled = string
/**
 * Specifies which variant should be used when the feature is considered enabled and no other allocation rules are applicable.
 */
export type DefaultVariantAllocationWhenEnabled = string
/**
 * The name of the variant to use if the user allocation matches the current user.
 */
export type UserAllocationVariant = string
/**
 * Collection of users where if any match the current user, the variant specified in the user allocation is used.
 */
export type UserAllocationUsersCollection = string[]
/**
 * A list of objects, each containing a variant name and list of users for whom that variant should be used.
 */
export type UserAllocationCollection = UserAllocation[]
/**
 * The name of the variant to use if the group allocation matches a group the current user is in.
 */
export type GroupAllocationVariant = string
/**
 * Collection of groups where if the current user is in any of these groups, the variant specified in the group allocation is used.
 */
export type GroupAllocationGroupsCollection = string[]
/**
 * A list of objects, each containing a variant name and list of groups for which that variant should be used.
 */
export type GroupAllocationCollection = GroupAllocation[]
/**
 * The name of the variant to use if the calculated percentile for the current user falls in the provided range.
 */
export type PercentileAllocationVariant = string
/**
 * The lower end of the percentage range for which this variant will be used.
 */
export type PercentileAllocationFrom = number
/**
 * The upper end of the percentage range for which this variant will be used.
 */
export type PercentileAllocationTo = number
/**
 * A list of objects, each containing a variant name and percentage range for which that variant should be used.
 */
export type PercentileAllocationCollection = PercentileAllocation[]
/**
 * The value percentile calculations are based on. The calculated percentile is consistent across features for a given user if the same nonempty seed is used.
 */
export type PercentileAllocationSeed = string
/**
 * Indicates if telemetry is enabled.
 */
export type TelemetryEnabledState = boolean

export interface FeatureFlag {
  id: FeatureID
  description?: FeatureDescription
  display_name?: FeatureDisplayName
  enabled?: EnabledState
  conditions?: FeatureEnablementConditions
  variants?: VariantCollection
  allocation?: VariantAllocation
  telemetry?: TelemetryOptions
  [k: string]: unknown
}
/**
 * The declaration of conditions used to dynamically enable the feature
 */
export interface FeatureEnablementConditions {
  requirement_type?: RequirementType
  client_filters?: ClientFilterCollection
  [k: string]: unknown
}
export interface ClientFilter {
  name: ClientFilterName
  parameters?: ClientFilterParameters
  [k: string]: unknown
}
/**
 * Parameters for a given client filter. A client filter can require any set of parameters of any type.
 */
export interface ClientFilterParameters {
  /**
   * This interface was referenced by `ClientFilterParameters`'s JSON-Schema definition
   * via the `patternProperty` "^.*$".
   */
  [k: string]:
    | string
    | null
    | {
        [k: string]: unknown
      }
    | number
    | unknown[]
    | boolean
}
export interface Variant {
  name: VariantName
  configuration_value?: VariantConfigurationValue
  status_override?: VariantStatusOverride
  [k: string]: unknown
}
/**
 * Determines how variants should be allocated for the feature to various users.
 */
export interface VariantAllocation {
  default_when_disabled?: DefaultVariantAllocationWhenDisabled
  default_when_enabled?: DefaultVariantAllocationWhenEnabled
  user?: UserAllocationCollection
  group?: GroupAllocationCollection
  percentile?: PercentileAllocationCollection
  seed?: PercentileAllocationSeed
  [k: string]: unknown
}
export interface UserAllocation {
  variant: UserAllocationVariant
  users: UserAllocationUsersCollection
  [k: string]: unknown
}
export interface GroupAllocation {
  variant: GroupAllocationVariant
  groups: GroupAllocationGroupsCollection
  [k: string]: unknown
}
export interface PercentileAllocation {
  variant: PercentileAllocationVariant
  from: PercentileAllocationFrom
  to: PercentileAllocationTo
  [k: string]: unknown
}
/**
 * The declaration of options used to configure telemetry for this feature.
 */
export interface TelemetryOptions {
  enabled?: TelemetryEnabledState
  metadata?: TelemetryMetadata
  [k: string]: unknown
}
/**
 * A container for metadata that should be bundled with flag telemetry.
 */
export interface TelemetryMetadata {
  /**
   * This interface was referenced by `TelemetryMetadata`'s JSON-Schema definition
   * via the `patternProperty` "^.*$".
   */
  [k: string]: string
}
